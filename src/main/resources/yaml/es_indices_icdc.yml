# Indices:
#   - index_name: cases
#     type: neo4j

#     mapping:
#       breed:
#         type: search_as_you_type
#       disease_term:
#         type: search_as_you_type
#       case_id:
#         type: search_as_you_type
#       program_name:
#         type: search_as_you_type
#       clinical_study_designation:
#         type: search_as_you_type

#     cypher_query: "
#       MATCH (c:case)
#       OPTIONAL MATCH (c)-->(i:canine_individual)<--(o:case)
#       OPTIONAL MATCH (p:program)<--(s:study)<--(c)
#       OPTIONAL MATCH (s)<--(sf:file)
#       OPTIONAL MATCH (c)<--(demo:demographic)
#       OPTIONAL MATCH (c)<--(diag:diagnosis)
#       OPTIONAL MATCH (c)<--(r:registration)
#       OPTIONAL MATCH (c)-->(ci:canine_individual)
#       OPTIONAL MATCH (c)-->(co:cohort)
#       OPTIONAL MATCH (c)<--(samp:sample)
#       OPTIONAL MATCH (f:file)-[*]->(c)
#       OPTIONAL MATCH (f)-->(parent)
#       OPTIONAL MATCH (co)-->(a:study_arm)
#       WITH DISTINCT c, p, s, a, co, demo, diag, f, o, i, ci, samp, parent,
#       COLLECT(DISTINCT sf.file_type) AS study_file_types,
#       COLLECT(DISTINCT sf.file_format) AS study_file_formats,
#       COLLECT(DISTINCT CASE sf WHEN null THEN null ELSE 'study' END) AS study_file_association,
#       COLLECT(CASE r.registration_origin WHEN s.clinical_study_designation THEN null ELSE r.registration_origin END) AS registrations
#       return
#       p.program_acronym AS program,
#       p.program_name AS program_name,
#       c.case_id AS case_id,
#       s.clinical_study_designation + ' ('+ s.accession_id+')' AS study,
#       s.clinical_study_designation AS clinical_study_designation,
#       s.clinical_study_type AS study_type,
#       CASE registrations
#       WHEN [] THEN ['Not Applicable']
#       ELSE registrations
#       END AS biobank,
#       CASE ci WHEN null THEN 'Single Study' ELSE 'Multiple Study' END AS study_participation,
#       co.cohort_description AS cohort,
#       demo.breed AS breed,
#       diag.disease_term AS disease_term,
#       diag.stage_of_disease AS stage_of_disease,
#       demo.patient_age_at_enrollment AS age,
#       demo.sex AS sex,
#       demo.neutered_indicator AS neutered_status,
#       demo.weight AS weight,
#       diag.best_response AS response_to_treatment,
#       diag.primary_disease_site as disease_site,
#       COLLECT(DISTINCT samp.summarized_sample_type) AS sample_type,
#       COLLECT(DISTINCT samp.specific_sample_pathology) AS sample_pathology,
#       COLLECT(DISTINCT samp.sample_site) AS sample_site,
#       COLLECT(DISTINCT f.uuid) AS files,
#       COLLECT(DISTINCT head(labels(parent))) + study_file_association AS file_association,
#       COLLECT(DISTINCT f.file_type) + study_file_types AS file_type,
#       COLLECT(DISTINCT f.file_format) + study_file_formats AS file_format,
#       COLLECT(DISTINCT o.case_id) AS other_cases,
#       i.canine_individual_id as individual_id,
#       diag.primary_disease_site as primary_disease_site,
#       diag.date_of_diagnosis as date_of_diagnosis,
#       diag.histology_cytopathology as histology_cytopathology,
#       diag.histological_grade as histological_grade,
#       diag.pathology_report as pathology_report,
#       diag.treatment_data as treatment_data,
#       diag.follow_up_data as follow_up_data,
#       diag.concurrent_disease as concurrent_disease,
#       diag.concurrent_disease_type as concurrent_disease_type,
#       a.arm as arm
#       "

#   - index_name: samples
#     type: neo4j

#     mapping:
#       program_name:
#         type: search_as_you_type
#       sample_id:
#         type: search_as_you_type
#       sample_site:
#         type: search_as_you_type
#       clinical_study_designation:
#         type: search_as_you_type
#       case_id:
#         type: search_as_you_type
#       physical_sample_type:
#         type: search_as_you_type
#       general_sample_pathology:
#         type: search_as_you_type

#     cypher_query: "
#       MATCH (samp:sample)-->(c:case)
#       OPTIONAL MATCH (c)-->(i:canine_individual)<--(o:case)
#       OPTIONAL MATCH (p:program)<--(s:study)<--(c)
#       OPTIONAL MATCH (s)<--(sf:file)
#       OPTIONAL MATCH (c)<--(demo:demographic)
#       OPTIONAL MATCH (c)<--(diag:diagnosis)
#       OPTIONAL MATCH (c)<--(r:registration)
#       OPTIONAL MATCH (c)-->(ci:canine_individual)
#       OPTIONAL MATCH (c)-->(co:cohort)
#       OPTIONAL MATCH (f:file)-[*]->(c)
#       OPTIONAL MATCH (f)-->(parent)
#       OPTIONAL MATCH (sample_f)-->(samp)
#       OPTIONAL MATCH (co)-->(a:study_arm)
#       WITH DISTINCT c, p, s, a, co, demo, diag, f, sample_f, o, i, ci, samp, parent,
#       COLLECT(DISTINCT sf.file_type) AS study_file_types,
#       COLLECT(DISTINCT sf.file_format) AS study_file_formats,
#       COLLECT(DISTINCT CASE sf WHEN null THEN null ELSE 'study' END) AS study_file_association,
#       COLLECT(CASE r.registration_origin WHEN s.clinical_study_designation THEN null ELSE r.registration_origin END) AS registrations
#       return
#       p.program_acronym AS program,
#       p.program_name AS program_name,
#       s.clinical_study_designation + ' ('+ s.accession_id+')' AS study,
#       s.clinical_study_designation AS clinical_study_designation,
#       s.clinical_study_type AS study_type,
#       CASE registrations
#       WHEN [] THEN ['Not Applicable']
#       ELSE registrations
#       END AS biobank,
#       CASE ci WHEN null THEN 'Single Study' ELSE 'Multiple Study' END AS study_participation,
#       co.cohort_description AS cohort,
#       demo.breed AS breed,
#       diag.disease_term AS diagnosis,
#       diag.primary_disease_site as disease_site,
#       diag.stage_of_disease AS stage_of_disease,
#       diag.best_response AS response_to_treatment,
#       demo.sex AS sex,
#       demo.neutered_indicator AS neutered_status,
#       samp.summarized_sample_type AS sample_type,
#       samp.specific_sample_pathology AS sample_pathology,
#       samp.sample_site AS sample_site,
#       COLLECT(DISTINCT head(labels(parent))) + study_file_association AS file_association,
#       COLLECT(DISTINCT f.file_type) + study_file_types AS file_type,
#       COLLECT(DISTINCT f.file_format) + study_file_formats AS file_format,

#       c.case_id AS case_id,
#       samp.sample_id AS sample_id,

#       samp.tumor_grade as tumor_grade,
#       samp.sample_chronology as sample_chronology,
#       samp.percentage_tumor as percentage_tumor,
#       samp.necropsy_sample as necropsy_sample,
#       samp.sample_preservation as sample_preservation,
#       samp.physical_sample_type as physical_sample_type,
#       samp.general_sample_pathology as general_sample_pathology,
#       samp.tumor_sample_origin as tumor_sample_origin,
#       samp.comment as comment,

#       i.canine_individual_id as individual_id,
#       COLLECT(DISTINCT o.case_id) AS other_cases,
#       demo.patient_age_at_enrollment AS patient_age_at_enrollment,
#       demo.neutered_indicator AS neutered_indicator,
#       demo.weight AS weight,
#       diag.primary_disease_site as primary_disease_site,
#       diag.date_of_diagnosis as date_of_diagnosis,
#       diag.histology_cytopathology as histology_cytopathology,
#       diag.histological_grade as histological_grade,
#       diag.best_response AS best_response,
#       diag.pathology_report as pathology_report,
#       diag.treatment_data as treatment_data,
#       diag.follow_up_data as follow_up_data,
#       diag.concurrent_disease as concurrent_disease,
#       diag.concurrent_disease_type as concurrent_disease_type,
#       co.cohort_description AS cohort_description,
#       a.arm as arm,
#       COLLECT(DISTINCT sample_f.uuid) AS files
#       "

#   - index_name: files
#     type: neo4j

#     mapping:
#       file_name:
#         type: search_as_you_type
#       file_type:
#         type: search_as_you_type
#       program_name:
#         type: search_as_you_type
#       clinical_study_designation:
#         type: search_as_you_type
#       case_id:
#         type: search_as_you_type
#       sample_id:
#         type: search_as_you_type

#     cypher_query: "
#       MATCH (f:file)-->(s:study)
#       MATCH (s)<-[*]-(c:case)
#       OPTIONAL MATCH (c)-->(i:canine_individual)<--(o:case)
#       OPTIONAL MATCH (p:program)<--(s)
#       OPTIONAL MATCH (c)<--(demo:demographic)
#       OPTIONAL MATCH (c)<--(diag:diagnosis)
#       OPTIONAL MATCH (c)<--(r:registration)
#       OPTIONAL MATCH (c)-->(co:cohort)
#       OPTIONAL MATCH (c)<--(samp:sample)
#       OPTIONAL MATCH (co)-->(a:study_arm)
#       WITH DISTINCT f, c, p, s, a, co, demo, diag, samp, o, i,
#       CASE i WHEN null THEN 'Single Study' ELSE 'Multiple Study' END AS participation,
#       CASE r.registration_origin WHEN s.clinical_study_designation THEN 'Not Applicable' ELSE r.registration_origin END AS bioB
#       return DISTINCT
#       p.program_acronym AS program,
#       s.clinical_study_designation + ' ('+ s.accession_id+')' AS study,
#       s.clinical_study_type AS study_type,
#       COLLECT(DISTINCT bioB) AS biobank,
#       COLLECT(DISTINCT participation) AS study_participation,
#       COLLECT(DISTINCT co.cohort_description) AS cohort,
#       COLLECT(DISTINCT demo.breed) AS breed,
#       COLLECT(DISTINCT diag.disease_term) AS diagnosis,
#       COLLECT(DISTINCT diag.primary_disease_site) as disease_site,
#       COLLECT(DISTINCT diag.stage_of_disease) AS stage_of_disease,
#       COLLECT(DISTINCT diag.best_response) AS response_to_treatment,
#       COLLECT(DISTINCT demo.sex) AS sex,
#       COLLECT(DISTINCT demo.neutered_indicator) AS neutered_status,
#       COLLECT(DISTINCT samp.summarized_sample_type) AS sample_type,
#       COLLECT(DISTINCT samp.specific_sample_pathology) AS sample_pathology,
#       COLLECT(DISTINCT samp.sample_site) AS sample_site,
#       'study' AS file_association,
#       f.file_type AS file_type,
#       f.file_format AS file_format,

#       COLLECT(DISTINCT c.case_id) AS case_ids,
#       null AS sample_ids,
#       f.uuid as file_uuids,

#       'study' AS file_level,
#       f.file_name as file_name,
#       f.file_description as file_description,
#       f.file_size as file_size,
#       s.clinical_study_designation AS study_code,
#       null as physical_sample_type,
#       null as general_sample_pathology,
#       null as tumor_sample_origin,
#       null AS summarized_sample_type,
#       null as specific_sample_pathology,
#       null as date_of_sample_collection,
#       null as tumor_grade,
#       null as sample_chronology,
#       null as percentage_tumor,
#       null as necropsy_sample,
#       null as sample_preservation,
#       null as comment,
#       null as individual_id,
#       null AS patient_age_at_enrollment,
#       null AS neutered_indicator,
#       null AS weight,
#       null as primary_disease_site,
#       null as date_of_diagnosis,
#       null as histology_cytopathology,
#       null as histological_grade,
#       null AS best_response,
#       null as pathology_report,
#       null as treatment_data,
#       null as follow_up_data,
#       null as concurrent_disease,
#       null as concurrent_disease_type,
#       null AS cohort_description,
#       null as arm,
#       [] AS other_cases
#       UNION
#       MATCH (f:file)-[*]->(c:case)
#       MATCH (f)-->(parent)
#       OPTIONAL MATCH (f)-->(samp:sample)
#       OPTIONAL MATCH (c)-->(i:canine_individual)<--(o:case)
#       OPTIONAL MATCH (p:program)<--(s:study)<--(c)
#       OPTIONAL MATCH (c)<--(demo:demographic)
#       OPTIONAL MATCH (c)<--(diag:diagnosis)
#       OPTIONAL MATCH (c)<--(r:registration)
#       OPTIONAL MATCH (c)-->(co:cohort)
#       OPTIONAL MATCH (co)-->(a:study_arm)
#       WITH DISTINCT f, c, p, s, a, co, demo, diag, o, i, samp, parent,
#       COLLECT(CASE r.registration_origin WHEN s.clinical_study_designation THEN null ELSE r.registration_origin END) AS registrations
#       return
#       p.program_acronym AS program,
#       p.program_name AS program_name,
#       s.clinical_study_designation + ' ('+ s.accession_id+')' AS study,
#       s.clinical_study_type AS study_type,
#       CASE registrations
#       WHEN [] THEN ['Not Applicable']
#       ELSE registrations
#       END AS biobank,
#       CASE i WHEN null THEN 'Single Study' ELSE 'Multiple Study' END AS study_participation,
#       co.cohort_description AS cohort,
#       demo.breed AS breed,
#       diag.disease_term AS diagnosis,
#       diag.primary_disease_site as disease_site,
#       diag.stage_of_disease AS stage_of_disease,
#       diag.best_response AS response_to_treatment,
#       demo.sex AS sex,
#       demo.neutered_indicator AS neutered_status,
#       samp.summarized_sample_type AS sample_type,
#       samp.specific_sample_pathology AS sample_pathology,
#       samp.sample_site AS sample_site,
#       head(labels(parent)) AS file_association,
#       f.file_type AS file_type,
#       f.file_format AS file_format,

#       c.case_id AS case_id,
#       samp.sample_id AS sample_id,
#       f.uuid as file_uuids,

#       'case' AS file_level,
#       f.file_name as file_name,
#       f.file_description as file_description,
#       f.file_size as file_size,
#       s.clinical_study_designation AS clinical_study_designation,
#       samp.physical_sample_type as physical_sample_type,
#       samp.general_sample_pathology as general_sample_pathology,
#       samp.tumor_sample_origin as tumor_sample_origin,
#       samp.summarized_sample_type AS summarized_sample_type,
#       samp.specific_sample_pathology as specific_sample_pathology,
#       samp.date_of_sample_collection as date_of_sample_collection,
#       samp.tumor_grade as tumor_grade,
#       samp.sample_chronology as sample_chronology,
#       samp.percentage_tumor as percentage_tumor,
#       samp.necropsy_sample as necropsy_sample,
#       samp.sample_preservation as sample_preservation,
#       samp.comment as comment,
#       i.canine_individual_id as individual_id,
#       demo.patient_age_at_enrollment AS patient_age_at_enrollment,
#       demo.neutered_indicator AS neutered_indicator,
#       demo.weight AS weight,
#       diag.primary_disease_site as primary_disease_site,
#       diag.date_of_diagnosis as date_of_diagnosis,
#       diag.histology_cytopathology as histology_cytopathology,
#       diag.histological_grade as histological_grade,
#       diag.best_response AS best_response,
#       diag.pathology_report as pathology_report,
#       diag.treatment_data as treatment_data,
#       diag.follow_up_data as follow_up_data,
#       diag.concurrent_disease as concurrent_disease,
#       diag.concurrent_disease_type as concurrent_disease_type,
#       co.cohort_description AS cohort_description,
#       a.arm as arm,
#       COLLECT(DISTINCT o.case_id) AS other_cases
#       "

#   - index_name: programs
#     type: neo4j

#     mapping:
#       program_id:
#         type: search_as_you_type
#       program_id_kw:
#         type: keyword
#       program_name:
#         type: search_as_you_type
#       program_acronym:
#         type: search_as_you_type
#       program_external_url:
#         type: search_as_you_type
#       program_short_description:
#         type: search_as_you_type

#     cypher_query: "
#       MATCH (p:program)
#       OPTIONAL MATCH (p)<--(pf:file)
#       RETURN DISTINCT
#       p.program_acronym AS program_acronym,
#       p.program_id AS program_id,
#       p.program_id AS program_id_kw,
#       p.program_name AS program_name,
#       p.program_external_url AS program_external_url,
#       p.program_short_description AS program_short_description,
#       COLLECT(DISTINCT pf.file_name) AS program_file_names
#       "

#   - index_name: studies
#     type: neo4j

#     mapping:
#       program_id:
#         type: search_as_you_type
#       accession_id:
#         type: search_as_you_type
#       study_id_kw:
#         type: keyword
#       clinical_study_name:
#         type: search_as_you_type
#       clinical_study_type:
#         type: search_as_you_type
#       clinical_study_designation:
#         type: search_as_you_type

#     cypher_query: "
#       MATCH (s:study)
#       OPTIONAL MATCH (s)<--(sf:file)
#       OPTIONAL MATCH (s)-->(p:program)
#       RETURN DISTINCT
#       p.program_id AS program_id,
#       s.study_id AS study_id,
#       s.study_id AS study_id_kw,
#       s.study_acronym AS study_code,
#       s.study_name AS study_name,
#       s.study_type AS study_type,
#       s.clinical_study_designation AS clinical_study_designation,
#       s.accession_id AS accession_id,
#       s.clinical_study_name AS clinical_study_name,
#       s.clinical_study_type AS clinical_study_type,
#       COLLECT(DISTINCT sf.file_name) AS study_file_names
#       "

#   - index_name: about_page
#     type: about_file

#     mapping:
#       page:
#         type: search_as_you_type
#       title:
#         type: search_as_you_type
#       primaryContentImage:
#         type: text
#       content:
#         type: object

#   - index_name: model_nodes
#     type: model
#     subtype: node

#     mapping:
#       node:
#         type: search_as_you_type
#       node_kw:
#         type: keyword

#   - index_name: model_properties
#     type: model
#     subtype: property

#     mapping:
#       node:
#         type: search_as_you_type
#       property:
#         type: search_as_you_type
#       property_kw:
#         type: keyword
#       property_description:
#         type: search_as_you_type
#       property_required:
#         type: search_as_you_type
#       property_type:
#         type: search_as_you_type

#   - index_name: model_values
#     type: model
#     subtype: value

#     mapping:
#       node:
#         type: search_as_you_type
#       property:
#         type: search_as_you_type
#       property_description:
#         type: search_as_you_type
#       property_required:
#         type: search_as_you_type
#       property_type:
#         type: search_as_you_type
#       value:
#         type: search_as_you_type
#       value_kw:
#         type: keyword

# Indices settings
Indices:
  # First index
  # Name of the index to be created, existing index with same name will be deleted
  - index_name: subjects
    type: neo4j
    # type mapping for each property of the index
    mapping:
      programs:
        type: keyword
      program_id:
        type: keyword
      studies:
        type: keyword
      study_acronym:
        type: keyword
      study_short_description:
        type: keyword
      lab_procedures:
        type: keyword
      subject_ids:
        type: keyword
      subject_id_num:
        type: integer
      subject_id_gs:
        type: search_as_you_type
      diagnoses:
        type: keyword
      diagnosis_gs:
        type: search_as_you_type
      rc_scores:
        type: keyword
      tumor_sizes:
        type: keyword
      chemo_regimen:
        type: keyword
      tumor_grades:
        type: keyword
      er_status:
        type: keyword
      pr_status:
        type: keyword
      endo_therapies:
        type: keyword
      meno_status:
        type: keyword
      age_at_index:
        type: integer
      age_at_index_gs:
        type: search_as_you_type
      survival_time:
        type: integer
      survival_time_unit:
        type: keyword
      tissue_type:
        type: keyword
      composition:
        type: keyword
      association:
        type: keyword
      file_type:
        type: keyword
      samples:
        type: keyword
      files:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
      MATCH (ss)<-[:sf_of_study_subject]-(sf)
      MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
      MATCH (ss)<-[:demographic_of_study_subject]-(demo)
      MATCH (ss)<-[:sample_of_study_subject]-(samp)
      MATCH (ss)<-[*..2]-(parent)<--(f:file)
      OPTIONAL MATCH (f)-[:file_of_laboratory_procedure]->(lp)
      RETURN DISTINCT
      p.program_acronym AS programs,
      p.program_id AS program_id,
      (s.study_acronym + ': ' + s.study_short_description) AS studies,
      s.study_acronym AS study_acronym,
      s.study_short_description AS study_short_description,
      COLLECT(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
      ss.study_subject_id AS subject_ids,
      ss.study_subject_id AS subject_id_gs,
      toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
      ss.disease_subtype AS diagnoses,
      ss.disease_subtype AS diagnosis_gs,
      sf.grouped_recurrence_score AS rc_scores,
      d.tumor_size_group AS tumor_sizes,
      tp.chemotherapy_regimen AS chemo_regimen,
      d.tumor_grade AS tumor_grades,
      d.er_status AS er_status,
      d.pr_status AS pr_status,
      tp.endocrine_therapy_type AS endo_therapies,
      demo.menopause_status AS  meno_status,
      demo.age_at_index AS age_at_index,
      demo.age_at_index AS age_at_index_gs,
      demo.survival_time AS survival_time,
      demo.survival_time_unit AS survival_time_unit,
      COLLECT(DISTINCT samp.tissue_type) AS tissue_type,
      COLLECT(DISTINCT samp.composition) AS composition,
      COLLECT(DISTINCT head(labels(parent))) AS association,
      COLLECT(DISTINCT f.file_type) AS file_type,
      COLLECT(DISTINCT f.file_id) AS files,
      COLLECT(DISTINCT samp.sample_id) AS samples
      "

  - index_name: subject_ids
    type: neo4j
    # type mapping for each property of the index
    mapping:
      program_id:
        type: keyword
      subject_id:
        type: keyword
      subject_ids:
        type: keyword
      subject_id_num:
        type: integer

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
      RETURN DISTINCT
      p.program_id AS program_id,
      ss.study_subject_id AS subject_id,
      toLower(ss.study_subject_id) AS subject_ids,
      toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num
      "

  - index_name: samples
    type: neo4j
    # type mapping for each property of the index
    mapping:
      programs:
        type: keyword
      program_id:
        type: keyword
      study_acronym:
        type: keyword
      studies:
        type: keyword
      subject_ids:
        type: keyword
      subject_id_num:
        type: keyword
      sample_ids:
        type: keyword
      sample_id_gs:
        type: search_as_you_type
      sample_id_num:
        type: integer
      diagnoses:
        type: keyword
      rc_scores:
        type: keyword
      tumor_sizes:
        type: keyword
      chemo_regimen:
        type: keyword
      tumor_grades:
        type: keyword
      er_status:
        type: keyword
      pr_status:
        type: keyword
      endo_therapies:
        type: keyword
      meno_status:
        type: keyword
      tissue_type:
        type: keyword
      tissue_type_gs:
        type: search_as_you_type
      composition:
        type: keyword
      sample_anatomic_site:
        type: keyword
      sample_anatomic_site_gs:
        type: search_as_you_type
      sample_procurement_method:
        type: keyword
      files:
        type: keyword
      platform:
        type: keyword
      association:
        type: keyword
      file_type:
        type: keyword
      age_at_index:
        type: integer

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
      MATCH (ss)<-[:sf_of_study_subject]-(sf)
      MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
      MATCH (ss)<-[:demographic_of_study_subject]-(demo)
      MATCH (ss)<-[:sample_of_study_subject]-(samp)
      MATCH (samp)<-[*]-(f:file)
      MATCH (parent)<--(f)
      OPTIONAL MATCH (f)-[:file_of_laboratory_procedure]->(lp)
      RETURN DISTINCT
      p.program_acronym AS programs,
      p.program_id AS program_id,
      (s.study_acronym + ': ' + s.study_short_description) AS studies,
      s.study_acronym AS study_acronym,
      samp.sample_id AS sample_ids,
      samp.sample_id AS sample_id_gs,
      samp.sample_anatomic_site AS sample_anatomic_site,
      samp.sample_anatomic_site AS sample_anatomic_site_gs,
      samp.method_of_sample_procurement AS sample_procurement_method,
      lp.test_name AS platform,
      toInteger(split(samp.sample_id,'-')[2]) AS sample_id_num,
      ss.study_subject_id AS subject_ids,
      toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
      ss.disease_subtype AS diagnoses,
      sf.grouped_recurrence_score AS rc_scores,
      d.tumor_size_group AS tumor_sizes,
      tp.chemotherapy_regimen AS chemo_regimen,
      d.tumor_grade AS tumor_grades,
      d.er_status AS er_status,
      d.pr_status AS pr_status,
      tp.endocrine_therapy_type AS endo_therapies,
      demo.menopause_status AS  meno_status,
      demo.age_at_index AS age_at_index,
      samp.tissue_type AS tissue_type,
      samp.tissue_type AS tissue_type_gs,
      samp.composition AS composition,
      COLLECT(DISTINCT f.file_id) AS files,
      COLLECT(DISTINCT head(labels(parent))) AS association,
      COLLECT(DISTINCT f.file_type) AS file_type
      "
  - index_name: files
    type: neo4j
    # type mapping for each property of the index
    mapping:
      programs:
        type: keyword
      program_id:
        type: keyword
      studies:
        type: keyword
      study_acronym:
        type: keyword
      subject_ids:
        type: keyword
      subject_id_num:
        type: integer
      sample_ids:
        type: keyword
      sample_id_num:
        type: integer
      file_ids:
        type: keyword
      file_id_num:
        type: integer
      file_id_gs:
        type: search_as_you_type
      file_names:
        type: keyword
      file_name_gs:
        type: search_as_you_type
      file_description:
        type: keyword
      file_format:
        type: keyword
      file_format_gs:
        type: search_as_you_type
      file_size:
        type: double
      md5sum:
        type: keyword
      diagnoses:
        type: keyword
      rc_scores:
        type: keyword
      tumor_sizes:
        type: keyword
      chemo_regimen:
        type: keyword
      tumor_grades:
        type: keyword
      er_status:
        type: keyword
      pr_status:
        type: keyword
      endo_therapies:
        type: keyword
      meno_status:
        type: keyword
      tissue_type:
        type: keyword
      composition:
        type: keyword
      association:
        type: keyword
      file_type:
        type: keyword
      age_at_index:
        type: integer

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (ss:study_subject)<-[*..2]-(parent)<--(f:file)
      MATCH (ss)<-[:sf_of_study_subject]-(sf)
      MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
      MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
      MATCH (ss)<-[:demographic_of_study_subject]-(demo)
      MATCH (f)-[*]->(samp:sample)
      RETURN DISTINCT
      p.program_acronym AS programs,
      p.program_id AS program_id,
      (s.study_acronym + ': ' + s.study_short_description) AS studies,
      s.study_acronym AS study_acronym,
      ss.study_subject_id AS subject_ids,
      toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
      f.file_id AS file_ids,
      f.file_id AS file_id_gs,
      f.file_name AS file_names,
      f.file_name AS file_name_gs,
      f.file_description AS file_description,
      f.file_format AS file_format,
      f.file_format AS file_format_gs,
      f.file_size AS file_size,
      f.md5sum AS md5sum,
      toInteger(split(f.file_id,'-')[2]) AS file_id_num,
      ss.disease_subtype AS diagnoses,
      sf.grouped_recurrence_score AS rc_scores,
      d.tumor_size_group AS tumor_sizes,
      tp.chemotherapy_regimen AS chemo_regimen,
      d.tumor_grade AS tumor_grades,
      d.er_status AS er_status,
      d.pr_status AS pr_status,
      tp.endocrine_therapy_type AS endo_therapies,
      demo.menopause_status AS  meno_status,
      demo.age_at_index AS age_at_index,
      samp.sample_id AS sample_ids,
      toInteger(split(samp.sample_id,'-')[2]) AS sample_id_num,
      samp.tissue_type AS tissue_type,
      samp.composition AS composition,
      head(labels(parent)) AS association,
      f.file_type AS file_type
      order by f.file_id
      "

  - index_name: programs
    type: neo4j
    # type mapping for each property of the index
    mapping:
      program_code:
        type: search_as_you_type
      program_id:
        type: search_as_you_type
      program_id_kw:
        type: keyword
      program_file_names:
        type: search_as_you_type
      program_name:
        type: search_as_you_type

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (p:program)
      OPTIONAL MATCH (p)<--(pf:file)
      RETURN DISTINCT
      p.program_acronym AS program_code,
      p.program_id AS program_id,
      p.program_id AS program_id_kw,
      p.program_name AS program_name,
      COLLECT(DISTINCT pf.file_name) AS program_file_names
      "
  - index_name: studies
    type: neo4j
    # type mapping for each property of the index
    mapping:
      program_id:
        type: search_as_you_type
      study_code:
        type: search_as_you_type
      study_id:
        type: search_as_you_type
      study_id_kw:
        type: keyword
      study_name:
        type: search_as_you_type
      study_type:
        type: search_as_you_type
      study_file_names:
        type: search_as_you_type

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)
      OPTIONAL MATCH (s)<--(sf:file)
      OPTIONAL MATCH (s)-->(p:program)
      RETURN DISTINCT
      p.program_id AS program_id,
      s.study_id AS study_id,
      s.study_id AS study_id_kw,
      s.study_acronym AS study_code,
      s.study_name AS study_name,
      s.study_type AS study_type,
      COLLECT(DISTINCT sf.file_name) AS study_file_names
      "

  - index_name: about_page
    type: about_file
    # type mapping for each property of the index
    mapping:
      page:
        type: search_as_you_type
      title:
        type: search_as_you_type
      primaryContentImage:
        type: text
      content:
        type: object

  - index_name: model_nodes
    type: model
    subtype: node
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      node_kw:
        type: keyword

  - index_name: model_properties
    type: model
    subtype: property
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      property:
        type: search_as_you_type
      property_kw:
        type: keyword
      property_description:
        type: search_as_you_type
      property_required:
        type: search_as_you_type
      property_type:
        type: search_as_you_type

  - index_name: model_values
    type: model
    subtype: value
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      property:
        type: search_as_you_type
      property_description:
        type: search_as_you_type
      property_required:
        type: search_as_you_type
      property_type:
        type: search_as_you_type
      value:
        type: search_as_you_type
      value_kw:
        type: keyword
